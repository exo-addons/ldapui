<?xml version="1.0" encoding="ISO-8859-1"?>
<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_2.xsd http://www.exoplaform.org/xml/ns/kernel_1_2.xsd"
	xmlns="http://www.exoplaform.org/xml/ns/kernel_1_2.xsd">
	<component>
		<key>org.exoplatform.services.organization.idm.PicketLinkIDMService</key>
		<type>org.exoplatform.services.organization.idm.PicketLinkIDMServiceImpl</type>
		<init-params>
			<value-param>
				<name>config</name>
				<value>${ldapui.picketlink.configuration.path}</value>
			</value-param>
			<value-param>
				<name>portalRealm</name>
				<value>idm_realm</value>
			</value-param>
			<value-param>
				<name>apiCacheConfig</name>
				<value>${exo.idm.api.cache.config:jar:/conf/platform/idm/infinispan/local-config.xml}</value>
			</value-param>
			<value-param profiles="cluster">
				<name>apiCacheConfig</name>
				<value>${exo.idm.api.cache.config:jar:/conf/platform/idm/infinispan/cluster-config.xml}</value>
			</value-param>
			<value-param>
				<name>storeCacheConfig</name>
				<value>${gatein.idm.store.cache.config:jar:/conf/platform/idm/infinispan/local-config.xml}</value>
			</value-param>
			<value-param profiles="cluster">
				<name>storeCacheConfig</name>
				<value>${gatein.idm.store.cache.config:jar:/conf/platform/idm/infinispan/cluster-config.xml}</value>
			</value-param>
			<value-param>
				<name>skipExpirationOfStructureCacheEntries</name>
				<value>true</value>
			</value-param>
		</init-params>
	</component>
	<component>
		<key>org.exoplatform.services.organization.OrganizationService</key>
		<type>org.exoplatform.services.organization.idm.PicketLinkIDMOrganizationServiceImpl</type>
		<component-plugins>

			<component-plugin>
				<name>init.service.listener</name>
				<set-method>addListenerPlugin</set-method>
				<type>org.exoplatform.services.organization.OrganizationDatabaseInitializer</type>
				<description>this listener populate organization data for the first launch</description>
				<init-params>
					<value-param>
						<name>checkDatabaseAlgorithm</name>
						<description>check database</description>
						<value>entry</value>
					</value-param>
					<value-param>
						<name>printInformation</name>
						<description>Print information init database</description>
						<value>false</value>
					</value-param>
					<object-param>
						<name>configuration</name>
						<description>description</description>
						<object type="org.exoplatform.services.organization.OrganizationConfig">
							<field name="membershipType">
								<collection type="java.util.ArrayList">
									<value>
										<object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
											<field name="description">
												<string>Any membership type</string>
											</field>
											<field name="type">
												<string>*</string>
											</field>
										</object>
									</value>
									<value>
										<object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
											<field name="description">
												<string>manager membership type</string>
											</field>
											<field name="type">
												<string>manager</string>
											</field>
										</object>
									</value>
									<value>
										<object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
											<field name="description">
												<string>member membership type</string>
											</field>
											<field name="type">
												<string>member</string>
											</field>
										</object>
									</value>
								</collection>
							</field>
							<field name="group">
								<collection type="java.util.ArrayList">
									<value>
										<object type="org.exoplatform.services.organization.OrganizationConfig$Group">
											<field name="parentId">
												<string />
											</field>
											<field name="description">
												<string>the ldap groups group</string>
											</field>
											<field name="name">
												<string>${ldap.groups.groupNameToInit}</string>
											</field>
											<field name="label">
												<string>${ldap.groups.groupNameToInit}</string>
											</field>
										</object>
									</value>
								</collection>
							</field>
						</object>
					</object-param>
				</init-params>
			</component-plugin>
		</component-plugins>
		<init-params>
			<object-param>
				<name>configuration</name>
				<object type="org.exoplatform.services.organization.idm.Config">
					<!-- For all ids not mapped with type in 'groupTypeMappings' use parent id path as a group type to store group in PicketLink IDM. The effect of setting this option to false and not providing any mappings 
						under 'groupTypeMappings' option is that there can be only one group with a given name in all GateIn group tree -->
					<field name="useParentIdAsGroupType">
						<boolean>true</boolean>
					</field>
					<!-- Group stored in PicketLink IDM with a type mapped in 'groupTypeMappings' will automatically be member under mapped parent. Normally groups are linked by PicketLink IDM group association - such 
						relationship won't be needed then. It can be set to false if all groups are added via GateIn APIs This option may be useful with LDAP config as it will make (if set to true) every entry added to LDAP (not 
						via GateIn management UI) appear in GateIn -->
					<field name="forceMembershipOfMappedTypes">
						<boolean>true</boolean>
					</field>
					<!-- When 'userParentIdAsGroupType is set to true this value will be used to replace all "/" chars in id. This is because "/" is not allowed to be used in group type name in PicketLink IDM -->
					<field name="pathSeparator">
						<string>.</string>
					</field>
					<!-- Name of a group stored in PicketLink IDM that acts as root group in GateIn - "/" -->
					<field name="rootGroupName">
						<string>GTN_ROOT_GROUP</string>
					</field>
					<!-- Map groups added with GateIn API as a childs of a given group ID to be stored with a given group type name in PicketLink IDM. If parent ID ends with "/*" then all child groups will have the mapped 
						group type. Otherwise only direct (first level) children will use this type. This can be leveraged by LDAP setup. Given LDAP DN configured in PicketLink IDM to store specific group type will then store 
						one given branch in GateIn group tree while all other groups will remain in DB. -->
					<field name="groupTypeMappings">
						<map type="java.util.HashMap">
							<entry>
								<key>
									<string>/</string>
								</key>
								<value>
									<string>root_type</string>
								</value>
							</entry>
							<entry>
								<key>
									<string>${ldap.groups.groupParentName}</string>
								</key>
								<value>
									<string>ldap_groups</string>
								</value>
							</entry>
						</map>
					</field>
					<!-- If this option is used then each Membership created with MembrshipType that is equal to value specified here will be stored in PicketLink IDM as simple Group-User association -->
					<field name="associationMembershipType">
						<string>member</string>
					</field>
					<!-- if "associationMembershipType" option is used and this option is set to true then Membership with MembershipType configured to be stored as PicketLink IDM association will not be stored as PicketLink 
						IDM Role in case that they are in groups from this parameter. For RW LDAP setup, it's recommended to map all groups mapped to LDAP (all those from parameter groupTypeMappings) However for DB only and/or 
						Read-only LDAP, it's recommended to not map anything here -->
					<field name="ignoreMappedMembershipTypeGroupList">
						<collection type="java.util.ArrayList" item-type="java.lang.String">
							<!-- Uncomment for sample LDAP config <value> <string>/platform/*</string> </value> <value> <string>/organization/*</string> </value> -->
						</collection>
					</field>

					<!-- If 'true' will use JTA UserTransaction. If 'false' will use IDM transaction API -->
					<field name="useJTA">
						<boolean>false</boolean>
					</field>

					<!-- If PLIDM group will have name containing slash "/" char than it will be replace with following string. Slashes are used in group paths and if present in names may cause unpredictable behaviour -->
					<field name="slashReplacement">
						<string>@_@_@</string>
					</field>

					<!-- If groups should be displayed in a sorted order in the management UI -->
					<field name="sortGroups">
						<boolean>true</boolean>
					</field>

					<!-- If memberships should be displayed in a sorted order in the management UI -->
					<field name="sortMemberships">
						<boolean>true</boolean>
					</field>

					<!-- For some LDAP configurations where part of users can duplicate in both DB and LDAP it is not possible to count user efficiently for paginated query. Only way is to download whole content of LDAP 
						server and exclude duplicates manually to return accurate user count. When this option is set to false GateIn will rely on user count information returned from PLIDM which can return greater number of 
						users then in real non duplicated count for perf reasons.. Those users will be filtered before returning search page however to not return nulls last entry can be duplicated in returned user list. If this 
						value is set to true GateIn will perform whole non paginated query and filter it after. It will result in more accurate results and paginated list size info however can affect performance If you have DB 
						only setup, it's recommended to switch this option to false. This will help to have better performance. If you have DB+LDAP setup, it's recommended to switch this option to true, otherwise you can have 
						inaccurate results -->
					<field name="countPaginatedUsers">
						<boolean>false</boolean>
					</field>

					<!-- For DB+LDAP it is not possible to efficiently perform paginated membership query. Only way is to download all memberships from LDAP server and all memberships from DB and merge them together. 
						When this option is set to false GateIn will rely on membership count information returned from PLIDM and it will use paginated membership queries based on this. This is better for performance but for 
						DB+LDAP the memberships pagination may not behave correctly. If this value is set to true GateIn will perform whole non paginated query to obtain all memberships and filter it after. It will result in 
						more accurate results however can affect performance. If you have DB only setup, it's recommended to switch this option to false. This will help to have better performance. If you have DB+LDAP setup, it's 
						recommended to switch this option to true, otherwise you can have inaccurate results -->
					<field name="skipPaginationInMembershipQuery">
						<boolean>true</boolean>
					</field>

				</object>
			</object-param>
		</init-params>
	</component>
</configuration>
